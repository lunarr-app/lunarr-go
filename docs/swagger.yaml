basePath: /
definitions:
  auth.UserLogin:
    properties:
      password:
        maxLength: 32
        minLength: 6
        type: string
      username:
        maxLength: 16
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  auth.UserLoginResponse:
    properties:
      api_key:
        type: string
      status:
        type: string
    type: object
  auth.UserSignup:
    properties:
      displayname:
        maxLength: 48
        minLength: 1
        type: string
      email:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      sex:
        enum:
        - male
        - female
        - unknown
        type: string
      username:
        maxLength: 16
        minLength: 2
        type: string
    required:
    - displayname
    - email
    - password
    - username
    type: object
  auth.UserSignupResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  handlers.ResponseHello:
    properties:
      hello:
        type: string
    type: object
  movies.ListsResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/movies.MovieDetails'
        type: array
      total:
        type: integer
    type: object
  movies.MovieDetails:
    properties:
      location:
        type: string
      metadata:
        $ref: '#/definitions/movies.MovieMetadata'
      tmdb_id:
        type: integer
    type: object
  movies.MovieMetadata:
    properties:
      adult:
        type: boolean
      backdrop_path:
        type: string
      belongs_to_collection:
        $ref: '#/definitions/movies.TMDbBelongsToCollection'
      genres:
        items:
          $ref: '#/definitions/movies.TMDbGenre'
        type: array
      homepage:
        type: string
      imdb_id:
        type: string
      original_language:
        type: string
      original_title:
        type: string
      overview:
        type: string
      popularity:
        type: number
      poster_path:
        type: string
      release_date:
        type: string
      revenue:
        type: integer
      runtime:
        type: integer
      spoken_languages:
        items:
          $ref: '#/definitions/movies.TMDbSpokenLanguage'
        type: array
      status:
        type: string
      tagline:
        type: string
      title:
        type: string
      video:
        type: boolean
      vote_average:
        type: number
      vote_count:
        type: integer
    type: object
  movies.TMDbBelongsToCollection:
    properties:
      backdrop_path:
        type: string
      id:
        type: integer
      name:
        type: string
      poster_path:
        type: string
    type: object
  movies.TMDbGenre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  movies.TMDbSpokenLanguage:
    properties:
      iso_639_1:
        type: string
      name:
        type: string
    type: object
host: 127.0.0.1:3000
info:
  contact: {}
  description: Swagger for Lunarr API endpoints
  title: Lunarr API
  version: "1.0"
paths:
  /api:
    get:
      description: Middleware to authenticate API requests with an API key
      parameters:
      - description: API Key
        in: header
        name: x-api-key
        required: true
        type: string
      responses:
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate API
  /api/movies:
    get:
      consumes:
      - application/json
      description: Get a list of movies based on the search query and pagination parameters.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movies.ListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Movie Lists
      tags:
      - movies
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Request
        in: body
        name: loginReq
        required: true
        schema:
          $ref: '#/definitions/auth.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: User Signup Request
        in: body
        name: userReq
        required: true
        schema:
          $ref: '#/definitions/auth.UserSignup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.UserSignupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User Signup
      tags:
      - auth
  /hello:
    get:
      consumes:
      - application/json
      description: Hello
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHello'
      summary: Hello
      tags:
      - root
swagger: "2.0"
